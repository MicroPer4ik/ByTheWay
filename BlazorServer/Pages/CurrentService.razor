@page "/service"
@page "/service/{id:int}"

@inject IServicesService ServicesService

@if(Id==null)
{
    <h3>Создание новой услуги</h3>
}
else
{
    <h3>Изменение услуги: @service.TitleService</h3>
}

<EditForm Model="service" OnSubmit="HandleSubmit">
    <div>
        <label for="title">Название</label>
        <InputText id="title" @bind-Value="service.TitleService" class="form-control"></InputText>
    </div>
    <div>
        <label for="cost">Стоимость</label>
        <InputNumber id="cost" @bind-Value="service.CostService" class="form-control"></InputNumber>
    </div>
    <div>
        <label for="description">Описание</label>
        <InputText id="description" @bind-Value="service.DescriptionService" class="form-control"></InputText>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">@btnText</button>
    @if(Id != null)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteService">Удалить услугу</button>
        
    }
        
</EditForm>




@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Service service = new Service();

    protected override void OnInitialized()
    {
        btnText = Id == null ? "Сохранить новую услугу" : "Изменить услугу";
    }

    protected override async Task OnParametersSetAsync()
    {
        if(Id != null)
        {
            service = await ServicesService.GetSingleService((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if(Id== null)
        {
            await ServicesService.CreateService(service);
        }
        else
        {
            await ServicesService.UpdateService(service, (int)Id);
        }
    }

    async Task DeleteService()
    {
        await ServicesService.DeleteService(service.Id);
    }
}
