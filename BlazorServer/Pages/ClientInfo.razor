@page "/clientinfo"
@page "/clientinfo/{id:int}"
@using Microsoft.EntityFrameworkCore

@inject IClientService ClientService

<div class="site-section" id="section-about">
    <div class="container">
        @if (Id == null)
        {
            <h3>Создание новой клиента</h3>
        }
        else
        {
            <h3>Изменение клиента: @client.Surname @client.Name @client.Patronymic</h3>
        }

        <EditForm Model="client" OnSubmit="HandleSubmit">
            <div>
                <label for="title">Фамилия</label>
                <InputText id="title" @bind-Value="client.Surname" class="form-control"></InputText>
            </div>
            <div>
                <label for="title">Имя</label>
                <InputText id="title" @bind-Value="client.Name" class="form-control"></InputText>
            </div>
            <div>
                <label for="title">Отчество</label>
                <InputText id="title" @bind-Value="client.Patronymic" class="form-control"></InputText>
            </div>
            <div>
                <label for="title">Почта</label>
                <InputText id="title" @bind-Value="client.Email" class="form-control"></InputText>
            </div>
            <div>
                <label for="title">Телефон</label>
                <InputText id="title" @bind-Value="client.PhoneNumber" class="form-control"></InputText>
            </div>
            <div>
                <label for="title">Адрес</label>
                <InputText id="title" @bind-Value="client.Address" class="form-control"></InputText>
            </div>
            <br />
            <button type="submit" class="btn btn-primary">@btnText</button>
            @if (Id != null)
            {
                <button type="button" class="btn btn-danger" @onclick="DeleteBtnClick">Удалить услугу</button>
            }

            <Confirmation @ref="conformation" onCancel="OnCancel" onConfirm="OnConfirm">
                <div class="text-danger">Вы точно хотите удалить?</div>
            </Confirmation>

        </EditForm>

        <div>
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">Номер</th>
                        <th scope="col">Дата заказа</th>
                        <th scope="col">Стоимость</th>
                        <th scope="col">Услуги</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Orders)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.DateSubmission.ToShortDateString()</td>
                            <td>@item.PriceOrder руб.</td>
                            <td>
                                @if (item.ServiceList.Count > 0)
                                    {

                                        <ul>
                                            @foreach (var service in item.ServiceList)
                                            {
                                                <li>@service.TitleService</li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <span>Нет услуг</span>
                                    }
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>Итого:</td>
                        <td></td>
                        <td>@AllPrice руб.</td>
                    </tr>
                </tbody>
            </table>
        </div>

    </div>
</div>
@code {
    [Parameter]
    public int? Id { get; set; }
    public decimal AllPrice {get;set;} = 0;
    string btnText = string.Empty;
    CleaningDbContext context = new CleaningDbContext();
    List<Order> Orders = new List<Order>();
    Confirmation conformation;
    Client client = new Client();

    void DeleteBtnClick()
    {
        conformation.DisplayConformation();
    }

    async void OnConfirm()
    {
        await DeleteService();
        conformation.DisplayConformation();

    }
    void OnCancel()
    {
        conformation.DisplayConformation();
    }



    protected override void OnInitialized()
    {
        btnText = Id == null ? "Сохранить новую клиента" : "Изменить услугу";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            client = await ClientService.GetSingleClient((int)Id);
            Orders = await context.Orders.Where(o => o.IdClient == Id).ToListAsync();
            foreach (var order in Orders)
            {
                order.ServiceList = await context.Services.Include(s => s.OrderServices).Where(s => s.OrderServices.Any(c => c.IdOrder == order.Id)).ToListAsync();
                AllPrice += order.PriceOrder;
            }
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await ClientService.CreateClient(client);
        }
        else
        {
            await ClientService.UpdateClient(client, (int)Id);
        }
    }

    async Task DeleteService()
    {
        await ClientService.DeleteClient(client.Id);
    }
}
